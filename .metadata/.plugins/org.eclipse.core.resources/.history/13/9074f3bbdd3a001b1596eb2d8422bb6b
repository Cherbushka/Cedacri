package com.example.test;

import com.vaadin.flow.component.Key;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.dependency.CssImport;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.component.notification.Notification.Position;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.PasswordField;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.data.binder.Binder;
import com.vaadin.flow.data.binder.ValidationResult;
import com.vaadin.flow.data.binder.Validator;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.server.PWA;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * A sample Vaadin view class.
 * <p>
 * To implement a Vaadin view just extend any Vaadin component and
 * use @Route annotation to announce it in a URL as a Spring managed
 * bean.
 * Use the @PWA annotation make the application installable on phones,
 * tablets and some desktop browsers.
 * <p>
 * A new instance of this class is created for every new user and every
 * browser tab/window.
 */
@SuppressWarnings("serial")
@Route
@PWA(name = "Vaadin Application",
        shortName = "Vaadin App",
        description = "This is an example Vaadin application.",
        enableInstallPrompt = false)
@CssImport("./styles/shared-styles.css")
@CssImport(value = "./styles/vaadin-text-field-styles.css", themeFor = "vaadin-text-field")
public class MainView extends VerticalLayout {

    /**
     * Construct a new Vaadin view.
     * <p>
     * Build the initial UI state for the user accessing the application.
     *
     * @param service The message service. Automatically injected Spring managed bean.
     */
    public MainView(@Autowired GreetService service) {
    	
    	Binder<User> binder = new Binder<>();
    	
    	
    	TextField name = new TextField();
        name.setLabel("Username:");
        name.setMaxLength(20);
        binder.forField(name)
	        .withValidator((Validator<?super String>) (value, context) -> {
	            if(value.length() < 6)
	            	return ValidationResult.error("Username should contain at least 6 characters");
	            else if(value.length() >= 20)
	            	return ValidationResult.error("Username should contain less than 20 characters");
					/*
					 * else if(value.matches(".*\s.*")) return
					 * ValidationResult.error("Username shouldn't contain space characters");
					 */
	            else if(!value.matches(".*[A-Za-z].*")) 
	            	return ValidationResult.error("Username should contain at least 1 letter"); 
	            else if(value.matches(".*[^A-Za-z0-9_].*")) 
	            	return ValidationResult.error("Username shouldn't contain characters besides letters, digits and underscore"); 
	            return ValidationResult.ok();
	        }).bind(User::getUsername, User::setUsername);
        
        PasswordField password = new PasswordField();
        password.setMaxLength(20);
        binder.forField(password)
        .withValidator((Validator<?super String>) (value, context) -> {
            if(value.length() < 6)
            	return ValidationResult.error("Password should contain at least 6 characters");
            else if(value.length() >= 20)
            	return ValidationResult.error("Password should contain less than 20 characters");
					/*
					 * else if(value.matches(".*\s.*")) return
					 * ValidationResult.error("Password shouldn't contain space characters");
					 */
            else if(!value.matches(".*[A-Za-z].*")) 
            	return ValidationResult.error("Password should contain at least 1 letter"); 
            else if(!value.matches(".*[0-9].*")) 
            	return ValidationResult.error("Password should contain at least 1 digit");
            else if(value.matches(".*[^A-Za-z0-9_].*")) 
            	return ValidationResult.error("Password shouldn't contain characters besides letters, digits and underscore"); 
            return ValidationResult.ok();
        }).bind(User::getPassword, User::setPassword);
        password.setLabel("Password");
        
        
        
        
        Button button = new Button("Submit");
        button.addClickListener( e -> {
        	Notification notification = new Notification(
        	        "Hello"+name.getValue(), 3000,
        	        Position.TOP_START);
        	notification.open();
        });
        button.addThemeVariants(ButtonVariant.LUMO_PRIMARY);
        button.addClickShortcut(Key.ENTER);
   
        add(name, password, button);
    }

}
